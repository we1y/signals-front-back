import logging
import os
import random
from datetime import datetime, timedelta, timezone
from fastapi import HTTPException
import pytz
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from app.models.models import Profit, Signal, SignalInvestment, Balance, User
from app.services.balances import freeze_balance, unfreeze_balance, update_trading_balance

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env
PROFIT_PERCENT = float(os.getenv("PROFIT_PERCENT", 1.01))
BURN_CHANCE = float(os.getenv("BURN_CHANCE", 0.1))
JOIN_TIME = int(os.getenv("JOIN_TIME", 300))
ACTIVE_TIME = int(os.getenv("ACTIVE_TIME", 1800))

logging.getLogger("sqlalchemy.engine").setLevel(logging.CRITICAL)
logging.getLogger("sqlalchemy.pool").setLevel(logging.CRITICAL)
MAX_SECONDS = 10 * 365 * 24 * 60 * 60

def current_moscow_time():
    return datetime.now(timezone.utc) + timedelta(hours=3)

async def create_signal(
    db: AsyncSession,
    name: str,
    join_time: int,
    active_time: int,
    burn_chance: float,
    profit_percent: float,
    signal_cost: int  # –î–æ–±–∞–≤–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
):
    if join_time > MAX_SECONDS or active_time > MAX_SECONDS:
        raise ValueError("join_time –∏–ª–∏ active_time —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∏! –ú–∞–∫—Å–∏–º—É–º ‚Äî 10 –ª–µ—Ç.")
    
    try:
        now = current_moscow_time()
        join_until = now + timedelta(seconds=join_time)
        expires_at = join_until + timedelta(seconds=active_time)
        
        signal = Signal(
            name=name,
            join_until=join_until,
            expires_at=expires_at,
            burn_chance=burn_chance,
            profit_percent=profit_percent,
            signal_cost=signal_cost  # –¢–µ–ø–µ—Ä—å —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
        )
        db.add(signal)
        await db.commit()
        return signal
    except Exception as e:
        await db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        raise e


async def create_static_signals(db: AsyncSession):
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        await db.execute(text("DELETE FROM signals WHERE name LIKE '–°—Ç–∞—Ç–∏—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª%'"))
        await db.commit()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ID
        await db.execute(text("SELECT setval(pg_get_serial_sequence('signals', 'id'), COALESCE(MAX(id), 1), false) FROM signals"))
        await db.commit()

        for i in range(9):
            profit = random.uniform(4, 60) / 100  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ –¥–æ–ª–∏ (–æ—Ç 0.04 –¥–æ 0.6)
            risk = min(0.1 + profit * 1.2, 0.95)  # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∏—Å–∫ (–º–∞–∫—Å–∏–º—É–º 95%)

            work_time = 20 * 60  # 20 –º–∏–Ω—É—Ç
            signal_cost = random.randint(100, 200)  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞

            join_time = 15 * 60  # 15 –º–∏–Ω—É—Ç –¥–æ –≤—Ö–æ–¥–∞
            active_time = work_time  # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è

            # –¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            current_time = current_moscow_time() + timedelta(hours=3)

            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            signal = Signal(
                name=f"–°—Ç–∞—Ç–∏—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª {i + 1}",
                join_until=current_time + timedelta(seconds=join_time),
                expires_at=current_time + timedelta(seconds=active_time),
                burn_chance=risk,
                profit_percent=profit,
                signal_cost=signal_cost
            )
            db.add(signal)

        await db.commit()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")



async def process_signals(db: AsyncSession):
    now = current_moscow_time()

    try:
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        result = await db.execute(
            select(Signal).options(joinedload(Signal.investments))
            .filter(Signal.expires_at <= now, Signal.is_successful.is_(None))
        )
        signals = result.unique().scalars().all()
        

        for signal in signals:
            success = random.random() > BURN_CHANCE
            signal.is_successful = success


            for investment in signal.investments:
                if investment.is_checked:
                    continue

                user_id = investment.user_id
                amount = investment.amount

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –µ–≥–æ –±–∞–ª–∞–Ω—Å–µ –∏ reinvestments_par
                user_result = await db.execute(select(User).filter(User.id == user_id))
                user = user_result.scalars().first()

                if not user:
                    logging.warning(f"\n\n\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                profit = round(amount * (PROFIT_PERCENT - 1), 2)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤
                total_earned = amount + profit
                reinvestment_amount = round((profit * user.reinvestements_par) / 100, 2)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ


                if success:
                    await freeze_balance(db, user_id, total_earned)
                    await update_trading_balance(db, user_id, reinvestment_amount)

                # –ó–∞–ø–∏—Å—å –≤ Profit
                profit_entry = Profit(
                    user_id=user_id,
                    signal_id=signal.id,
                    amount=amount,  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É
                    profit=profit,  # –ü—Ä–∏–±—ã–ª—å
                    reinvested_amount=reinvestment_amount
                )
                db.add(profit_entry)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞ –≤ SignalInvestment
                investment.profit = success  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
                db.add(investment)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–æ–º–º–∏—Ç–∞

                if user.in_work > 0 and user.in_work <= user.plan:
                    investment.in_work -= 1
                    user.in_work -= 1

                investment.is_checked = True  # –û—Ç–º–µ—á–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é

            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–µ—É—Å–ø–µ—à–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º False –≤ profit –¥–ª—è –≤—Å–µ—Ö –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
            if not success:
                for investment in signal.investments:
                    if not investment.is_checked:
                        investment.profit = False
                        db.add(investment)  # –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–º–º–∏—Ç

        await db.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        await create_static_signals(db)

    except Exception as e:
        logging.error(f"\n\n\nüî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")



async def update_earned_balance(db: AsyncSession, user_id: int, earned_amount: float):
    balance_result = await db.execute(select(Balance).filter(Balance.user_id == user_id))
    balance = balance_result.scalars().first()
    if not balance:
        raise HTTPException(status_code=404, detail="–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    balance.earned_balance += earned_amount
    balance.balance += earned_amount
    await db.commit()
    await process_referral_bonus(db, user_id)

async def process_referral_bonus(db: AsyncSession, user_id: int):
    user_result = await db.execute(select(User).filter(User.id == user_id))
    user = user_result.scalars().first()
    if not user or not user.referred_by_id:
        return
    
    referrer_id = user.referred_by_id
    balance_result = await db.execute(select(Balance).filter(Balance.user_id == user_id))
    balance = balance_result.scalars().first()
    if not balance:
        return
    
    referral_bonus = balance.earned_balance * 0.01
    if referral_bonus > 0:
        ref_balance_result = await db.execute(select(Balance).filter(Balance.user_id == referrer_id))
        ref_balance = ref_balance_result.scalars().first()
        if ref_balance:
            ref_balance.balance += referral_bonus
            await db.commit()
