from datetime import datetime, timedelta
import logging
import os
import random
from fastapi import APIRouter, Depends, HTTPException
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.sql import func
from app.services.get_db import get_db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_db
from app.models.models import User, Balance, Signal, SignalInvestment
from app.services.balances import freeze_balance, update_trading_balance
from app.services.signals import create_signal  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞

# –û—Ç–∫–ª—é—á–∞–µ–º SQLAlchemy INFO-–ª–æ–≥–∏
logging.getLogger("sqlalchemy.engine").setLevel(logging.CRITICAL)
logging.getLogger("sqlalchemy.pool").setLevel(logging.CRITICAL)

# –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ SQLAlchemy (–≤–∞–∂–Ω–æ!)
logging.getLogger("sqlalchemy.engine").propagate = False
logging.getLogger("sqlalchemy.pool").propagate = False

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.ERROR)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)

logger.addHandler(console_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª logs_signals.txt (—Ä—è–¥–æ–º —Å main)
log_file_path = os.path.join(os.path.dirname(__file__), "../logs_signals.txt")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_file_path, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

signalis_router = APIRouter(prefix="/api/signals", tags=["Signals"])

### üîπ **Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞**
class JoinSignalRequest(BaseModel):
    telegram_id: int
    signal_id: int

class CustomSignalRequest(BaseModel):
    name: str
    join_time: int
    active_time: int
    burn_chance: float
    profit_percent: float
    signal_cost: int  # –î–æ–±–∞–≤–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞

class RandomSignalRequest(BaseModel):
    name: str  # –ò–º—è —Å–∏–≥–Ω–∞–ª–∞

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º (3 –º–∏–Ω—É—Ç—ã)
MIN_LOCK_PERIOD_MINUTES = 3

#-------------------------------------------------------------------------#   

@signalis_router.post("/join")
async def join_signal(request: JoinSignalRequest, db: AsyncSession = Depends(get_db)):
    """ 
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ö–æ–¥–∏—Ç –≤ —Å–∏–≥–Ω–∞–ª. –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ 
    –∏ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö. 
    """
    telegram_id = request.telegram_id
    signal_id = request.signal_id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await db.execute(select(User).filter(User.telegram_id == telegram_id))
        user = user_result.scalars().first()
        if not user:
            return {"message": "User not found", "success": False}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª
        existing_investment = await db.execute(
            select(SignalInvestment).filter(
                SignalInvestment.user_id == user.id,
                SignalInvestment.signal_id == signal_id
            )
        )
        if existing_investment.scalars().first():
            return {"message": "User has already joined this signal", "success": False}

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance_result = await db.execute(select(Balance).filter(Balance.user_id == user.id))
        balance = balance_result.scalars().first()
        if not balance:
            return {"message": "Balance not found", "success": False}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
        signal_result = await db.execute(select(Signal).filter(Signal.id == signal_id, Signal.join_until > func.now()))
        signal = signal_result.scalars().first()

        # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        if not signal:
            return {
                "message": "Signal is not available for joining",
                "success": False,
                "server_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "signal_join_until": signal.join_until.strftime("%Y-%m-%d %H:%M:%S") if signal else "N/A"
            }

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞
        signal_cost = signal.signal_cost

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if balance.trade_balance < signal_cost:
            return {
                "message": "Insufficient trading balance for signal cost",
                "success": False,
                "required_amount": signal_cost,
                "current_balance": balance.trade_balance
            }

        # –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É —Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        balance.trade_balance -= signal_cost

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.in_work += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
        investment = SignalInvestment(
            signal_id=signal_id,
            user_id=user.id,
            amount=signal_cost,
        )
        db.add(investment)

        await db.commit()

        return {
            "message": "Successfully joined the signal",
            "success": True,
            "signal_id": signal_id,
            "amount": signal_cost
        }

    except Exception as e:
        logging.error(f"Error while joining signal: {str(e)}")
        return {"message": "An error occurred while joining the signal", "success": False}

    
#-------------------------------------------------------------------------#   

### üîπ **–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞**
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
class RandomSignalRequest(BaseModel):
    name: str

@signalis_router.post("/create_random")
async def create_random_signal(request: RandomSignalRequest, db: AsyncSession = Depends(get_db)):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–≤—Ä–µ–º—è –¥–æ –≤—Ö–æ–¥–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —à–∞–Ω—Å —Å–≥–æ—Ä–∞–Ω–∏—è, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏, —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞)."""
    name = request.name

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    join_time = random.randint(60, 600)  # 1-10 –º–∏–Ω—É—Ç –¥–æ –≤—Ö–æ–¥–∞
    active_time = random.randint(600, 3600)  # 10-60 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
    profit_percent = round(random.uniform(4, 60), 2)  # 4-60% –ø—Ä–∏–±—ã–ª–∏
    
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –ø—Ä—è–º–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–∏–±—ã–ª–∏
    burn_chance = round(profit_percent * random.uniform(0.5, 1.5), 2)  # –†–∏—Å–∫ = 50-150% –æ—Ç –ø—Ä–∏–±—ã–ª–∏

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∏—Å–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5-90%
    burn_chance = min(max(burn_chance, 5), 90)

    signal_cost = random.randint(100, 1000)  # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –æ—Ç 100 –¥–æ 1000

    try:
        signal = await create_signal(db, name, join_time, active_time, burn_chance, profit_percent, signal_cost)
    
        return {
            "message": "Random signal created successfully",
            "signal_id": signal.id,
            "name": signal.name,
            "join_until": signal.join_until,
            "expires_at": signal.expires_at,
            "burn_chance": burn_chance,
            "profit_percent": profit_percent,
            "signal_cost": signal_cost
        }
    except Exception as e:
        logging.error(f"Error while creating random signal {name}: {str(e)}")
        raise HTTPException(status_code=500, detail="An error occurred while creating a random signal.")

    
#-------------------------------------------------------------------------#   

@signalis_router.post("/create_custom")
async def create_custom_signal(request: CustomSignalRequest, db: AsyncSession = Depends(get_db)):
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–≤—Ä–µ–º—è –¥–æ –≤—Ö–æ–¥–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —à–∞–Ω—Å —Å–≥–æ—Ä–∞–Ω–∏—è, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏, —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞)."""
    name = request.name
    join_time = request.join_time
    active_time = request.active_time
    profit_percent = request.profit_percent
    signal_cost = request.signal_cost

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π
    if join_time <= 0 or active_time <= 0 or profit_percent < 4 or profit_percent > 60:
        raise HTTPException(status_code=400, detail="Invalid parameters: join_time and active_time must be > 0, profit_percent must be between 4 and 60")
    
    if signal_cost < 100 or signal_cost > 1000:
        raise HTTPException(status_code=400, detail="Invalid signal_cost: must be between 100 and 1000")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª–∏ (50-150% –æ—Ç –ø—Ä–∏–±—ã–ª–∏)
    burn_chance = round(profit_percent * random.uniform(0.5, 1.5), 2)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∏—Å–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5-90%
    burn_chance = min(max(burn_chance, 5), 90)

    try:
        signal = await create_signal(db, name, join_time, active_time, burn_chance, profit_percent, signal_cost)

        return {
            "message": "Custom signal created successfully",
            "signal_id": signal.id,
            "name": signal.name,
            "join_until": signal.join_until,
            "expires_at": signal.expires_at,
            "burn_chance": burn_chance,
            "profit_percent": profit_percent,
            "signal_cost": signal_cost
        }
    except Exception as e:
        logging.error(f"Error while creating custom signal {name}: {str(e)}")
        raise HTTPException(status_code=500, detail="An error occurred while creating a custom signal.")

    
#-------------------------------------------------------------------------#   

@signalis_router.get("/active")
async def get_active_signals(telegram_id: int, db: AsyncSession = Depends(get_db)):
    """ –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        user_result = await db.execute(select(User).filter(User.telegram_id == telegram_id))
        user = user_result.scalars().first()
        
        if not user:
            raise HTTPException(status_code=404, detail="User not found")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞
        signals_limit = {0: 2, 1: 4, 2: 5}.get(user.plan, 2)

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        active_signals_result = await db.execute(
            select(Signal).filter(Signal.join_until > func.now()).limit(signals_limit)
        )
        active_signals = active_signals_result.scalars().all()

        if not active_signals:
            return {"message": "No active signals available."}

        signals_data = [
            {
                "signal_id": signal.id,
                "name": signal.name,
                "join_until": signal.join_until,
                "burn_chance": signal.burn_chance,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ (bur_chance ‚Üí burn_chance)
                "expires_at": signal.expires_at,
                "signal_cost": signal.signal_cost,
                "profit_percent": signal.profit_percent  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
            }
            for signal in active_signals
        ]
        
        return {"active_signals": signals_data}

    except Exception as e:
        logging.error(f"Error retrieving active signals: {str(e)}")
        raise HTTPException(status_code=500, detail="An error occurred while retrieving active signals.")


#-------------------------------------------------------------------------#   
@signalis_router.get("/investments/{telegram_id}")
async def get_user_investments(telegram_id: int, db: AsyncSession = Depends(get_db)):
    """
    –ò—â–µ—Ç user_id –ø–æ telegram_id, –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # 1. –ò—â–µ–º user_id –ø–æ telegram_id
    user_result = await db.execute(select(User.id).filter(User.telegram_id == telegram_id))
    user = user_result.scalar()

    if not user:
        return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    # 2. –ò—â–µ–º –≤—Å–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    investments_result = await db.execute(select(SignalInvestment).filter(SignalInvestment.user_id == user))
    investments = investments_result.scalars().all()

    if not investments:
        return {"message": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"}

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return {
        "user_id": user,
        "investments": [
            {
                "id": inv.id,
                "signal_id": inv.signal_id,
                "amount": inv.amount,
                "profit": inv.profit,
                "created_at": inv.created_at,
            }
            for inv in investments
        ]
    }

#-------------------------------------------------------------------------#   

@signalis_router.post("/enable_automode")
async def enable_automode(telegram_id: int, db: AsyncSession = Depends(get_db)):
    try:
        user_result = await db.execute(select(User).filter(User.telegram_id == telegram_id))
        user = user_result.scalars().first()

        if not user:
            raise HTTPException(status_code=404, detail="User not found")

        if user.automod:
            return {"message": "Auto mode is already enabled", "success": False}

        balance_result = await db.execute(select(Balance).filter(Balance.user_id == user.id))
        balance = balance_result.scalars().first()

        if not balance:
            raise HTTPException(status_code=404, detail="Balance not found")

        signal_result = await db.execute(select(Signal).filter(Signal.join_until > func.now()).order_by(Signal.join_until).limit(1))
        signal = signal_result.scalars().first()

        if not signal:
            return {"message": "No available signals", "success": False}

        signal_cost = signal.signal_cost

        if balance.trade_balance < signal_cost:
            return {
                "message": "Insufficient trading balance for signal cost",
                "success": False,
                "required_amount": signal_cost,
                "current_balance": balance.trade_balance
            }

        balance.trade_balance -= signal_cost
        user.in_work += 1

        investment = SignalInvestment(
            signal_id=signal.id,
            user_id=user.id,
            amount=signal_cost,
            auto_mode=True,
        )
        db.add(investment)

        user.automod = True
        user.auto_mode_locked_until = datetime.utcnow() + timedelta(minutes=MIN_LOCK_PERIOD_MINUTES)
        user.updated_at = datetime.utcnow()
        db.add(user)

        await db.commit()

        next_exit_time = user.auto_mode_locked_until.strftime("%Y-%m-%d %H:%M:%S")

        return {
            "message": "Auto mode successfully enabled and joined the signal",
            "success": True,
            "next_available_exit": next_exit_time
        }

    except Exception as e:
        logging.error(f"Error while enabling auto mode: {str(e)}")
        raise HTTPException(status_code=500, detail="An error occurred while enabling auto mode")

    
#-------------------------------------------------------------------------# 
@signalis_router.post("/disable_automode")
async def disable_automode(telegram_id: int, db: AsyncSession = Depends(get_db)):
    try:
        user_result = await db.execute(select(User).filter(User.telegram_id == telegram_id))
        user = user_result.scalars().first()

        if not user:
            raise HTTPException(status_code=404, detail="User not found")

        if not user.automod:
            return {"message": "Auto mode is already disabled", "success": False}

        current_time = datetime.utcnow()
        if user.auto_mode_locked_until and current_time < user.auto_mode_locked_until:
            return {
                "message": "Auto mode cannot be disabled yet. Try again later.",
                "success": False,
                "next_available_exit": user.auto_mode_locked_until.strftime("%Y-%m-%d %H:%M:%S")
            }

        user.automod = False
        user.auto_mode_locked_until = None
        user.updated_at = datetime.utcnow()
        db.add(user)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        investment_result = await db.execute(select(SignalInvestment).filter(SignalInvestment.user_id == user.id, SignalInvestment.auto_mode == True))
        investments = investment_result.scalars().all()
        for investment in investments:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
            pass

        await db.commit()

        return {"message": "Auto mode successfully disabled", "success": True}

    except Exception as e:
        logging.error(f"Error while disabling auto mode: {str(e)}")
        raise HTTPException(status_code=500, detail="An error occurred while disabling auto mode")